<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Jane\OpenApi\JsonSchema\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class MediaTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Jane\\OpenApi\\JsonSchema\\Model\\MediaType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Jane\OpenApi\JsonSchema\Model\MediaType;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        if (isset($data->{'$recursiveRef'})) {
            return new Reference($data->{'$recursiveRef'}, $context['document-origin']);
        }
        $object = new \Jane\OpenApi\JsonSchema\Model\MediaType();
        $data = clone $data;
        if (property_exists($data, 'schema') && $data->{'schema'} !== null) {
            $value = $data->{'schema'};
            if (is_object($data->{'schema'})) {
                $value = $this->denormalizer->denormalize($data->{'schema'}, 'Jane\\OpenApi\\JsonSchema\\Model\\Schema', 'json', $context);
            } elseif (is_object($data->{'schema'}) and isset($data->{'schema'}->{'$ref'})) {
                $value = $this->denormalizer->denormalize($data->{'schema'}, 'Jane\\OpenApi\\JsonSchema\\Model\\Reference', 'json', $context);
            }
            $object->setSchema($value);
            unset($data->{'schema'});
        }
        if (property_exists($data, 'example') && $data->{'example'} !== null) {
            $object->setExample($data->{'example'});
            unset($data->{'example'});
        }
        if (property_exists($data, 'examples') && $data->{'examples'} !== null) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data->{'examples'} as $key => $value_1) {
                $value_2 = $value_1;
                if (is_object($value_1)) {
                    $value_2 = $this->denormalizer->denormalize($value_1, 'Jane\\OpenApi\\JsonSchema\\Model\\Example', 'json', $context);
                } elseif (is_object($value_1) and isset($value_1->{'$ref'})) {
                    $value_2 = $this->denormalizer->denormalize($value_1, 'Jane\\OpenApi\\JsonSchema\\Model\\Reference', 'json', $context);
                }
                $values[$key] = $value_2;
            }
            $object->setExamples($values);
            unset($data->{'examples'});
        }
        if (property_exists($data, 'encoding') && $data->{'encoding'} !== null) {
            $values_1 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data->{'encoding'} as $key_1 => $value_3) {
                $values_1[$key_1] = $this->denormalizer->denormalize($value_3, 'Jane\\OpenApi\\JsonSchema\\Model\\Encoding', 'json', $context);
            }
            $object->setEncoding($values_1);
            unset($data->{'encoding'});
        }
        foreach ($data as $key_2 => $value_4) {
            if (preg_match('/^x-/', $key_2)) {
                $object[$key_2] = $value_4;
            }
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getSchema()) {
            $value = $object->getSchema();
            if (is_object($object->getSchema())) {
                $value = $this->normalizer->normalize($object->getSchema(), 'json', $context);
            } elseif (is_object($object->getSchema())) {
                $value = $this->normalizer->normalize($object->getSchema(), 'json', $context);
            }
            $data->{'schema'} = $value;
        }
        if (null !== $object->getExample()) {
            $data->{'example'} = $object->getExample();
        }
        if (null !== $object->getExamples()) {
            $values = new \stdClass();
            foreach ($object->getExamples() as $key => $value_1) {
                $value_2 = $value_1;
                if (is_object($value_1)) {
                    $value_2 = $this->normalizer->normalize($value_1, 'json', $context);
                } elseif (is_object($value_1)) {
                    $value_2 = $this->normalizer->normalize($value_1, 'json', $context);
                }
                $values->{$key} = $value_2;
            }
            $data->{'examples'} = $values;
        }
        if (null !== $object->getEncoding()) {
            $values_1 = new \stdClass();
            foreach ($object->getEncoding() as $key_1 => $value_3) {
                $values_1->{$key_1} = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'encoding'} = $values_1;
        }
        foreach ($object as $key_2 => $value_4) {
            if (preg_match('/^x-/', $key_2)) {
                $data->{$key_2} = $value_4;
            }
        }

        return $data;
    }
}
