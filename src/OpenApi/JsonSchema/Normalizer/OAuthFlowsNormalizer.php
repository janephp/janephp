<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Jane\OpenApi\JsonSchema\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OAuthFlowsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Jane\\OpenApi\\JsonSchema\\Model\\OAuthFlows';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Jane\OpenApi\JsonSchema\Model\OAuthFlows;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        if (isset($data->{'$recursiveRef'})) {
            return new Reference($data->{'$recursiveRef'}, $context['document-origin']);
        }
        $object = new \Jane\OpenApi\JsonSchema\Model\OAuthFlows();
        $data = clone $data;
        if (property_exists($data, 'implicit') && $data->{'implicit'} !== null) {
            $object->setImplicit($this->denormalizer->denormalize($data->{'implicit'}, 'Jane\\OpenApi\\JsonSchema\\Model\\ImplicitOAuthFlow', 'json', $context));
            unset($data->{'implicit'});
        }
        if (property_exists($data, 'password') && $data->{'password'} !== null) {
            $object->setPassword($this->denormalizer->denormalize($data->{'password'}, 'Jane\\OpenApi\\JsonSchema\\Model\\PasswordOAuthFlow', 'json', $context));
            unset($data->{'password'});
        }
        if (property_exists($data, 'clientCredentials') && $data->{'clientCredentials'} !== null) {
            $object->setClientCredentials($this->denormalizer->denormalize($data->{'clientCredentials'}, 'Jane\\OpenApi\\JsonSchema\\Model\\ClientCredentialsFlow', 'json', $context));
            unset($data->{'clientCredentials'});
        }
        if (property_exists($data, 'authorizationCode') && $data->{'authorizationCode'} !== null) {
            $object->setAuthorizationCode($this->denormalizer->denormalize($data->{'authorizationCode'}, 'Jane\\OpenApi\\JsonSchema\\Model\\AuthorizationCodeOAuthFlow', 'json', $context));
            unset($data->{'authorizationCode'});
        }
        foreach ($data as $key => $value) {
            if (preg_match('/^x-/', $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getImplicit()) {
            $data->{'implicit'} = $this->normalizer->normalize($object->getImplicit(), 'json', $context);
        }
        if (null !== $object->getPassword()) {
            $data->{'password'} = $this->normalizer->normalize($object->getPassword(), 'json', $context);
        }
        if (null !== $object->getClientCredentials()) {
            $data->{'clientCredentials'} = $this->normalizer->normalize($object->getClientCredentials(), 'json', $context);
        }
        if (null !== $object->getAuthorizationCode()) {
            $data->{'authorizationCode'} = $this->normalizer->normalize($object->getAuthorizationCode(), 'json', $context);
        }
        foreach ($object as $key => $value) {
            if (preg_match('/^x-/', $key)) {
                $data->{$key} = $value;
            }
        }

        return $data;
    }
}
