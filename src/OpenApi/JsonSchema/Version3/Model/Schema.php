<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Jane\OpenApi\JsonSchema\Version3\Model;

class Schema extends \ArrayObject
{
    /**
     * @var string
     */
    protected $title;
    /**
     * @var float
     */
    protected $multipleOf;
    /**
     * @var float
     */
    protected $maximum;
    /**
     * @var bool
     */
    protected $exclusiveMaximum;
    /**
     * @var float
     */
    protected $minimum;
    /**
     * @var bool
     */
    protected $exclusiveMinimum;
    /**
     * @var int
     */
    protected $maxLength;
    /**
     * @var int
     */
    protected $minLength;
    /**
     * @var string
     */
    protected $pattern;
    /**
     * @var int
     */
    protected $maxItems;
    /**
     * @var int
     */
    protected $minItems;
    /**
     * @var bool
     */
    protected $uniqueItems;
    /**
     * @var int
     */
    protected $maxProperties;
    /**
     * @var int
     */
    protected $minProperties;
    /**
     * @var string[]
     */
    protected $required;
    /**
     * @var mixed[]
     */
    protected $enum;
    /**
     * @var string
     */
    protected $type;
    /**
     * @var Schema|Reference
     */
    protected $not;
    /**
     * @var Schema[]|Reference[]
     */
    protected $allOf;
    /**
     * @var Schema[]|Reference[]
     */
    protected $oneOf;
    /**
     * @var Schema[]|Reference[]
     */
    protected $anyOf;
    /**
     * @var Schema|Reference
     */
    protected $items;
    /**
     * @var Schema[]|Reference[]
     */
    protected $properties;
    /**
     * @var Schema|Reference|bool
     */
    protected $additionalProperties;
    /**
     * @var string
     */
    protected $description;
    /**
     * @var string
     */
    protected $format;
    /**
     * @var mixed
     */
    protected $default;
    /**
     * @var bool
     */
    protected $nullable;
    /**
     * @var Discriminator
     */
    protected $discriminator;
    /**
     * @var bool
     */
    protected $readOnly;
    /**
     * @var bool
     */
    protected $writeOnly;
    /**
     * @var mixed
     */
    protected $example;
    /**
     * @var ExternalDocumentation
     */
    protected $externalDocs;
    /**
     * @var bool
     */
    protected $deprecated;
    /**
     * @var XML
     */
    protected $xml;

    /**
     * @return string
     */
    public function getTitle(): ?string
    {
        return $this->title;
    }

    /**
     * @param string $title
     *
     * @return self
     */
    public function setTitle(?string $title): self
    {
        $this->title = $title;

        return $this;
    }

    /**
     * @return float
     */
    public function getMultipleOf(): ?float
    {
        return $this->multipleOf;
    }

    /**
     * @param float $multipleOf
     *
     * @return self
     */
    public function setMultipleOf(?float $multipleOf): self
    {
        $this->multipleOf = $multipleOf;

        return $this;
    }

    /**
     * @return float
     */
    public function getMaximum(): ?float
    {
        return $this->maximum;
    }

    /**
     * @param float $maximum
     *
     * @return self
     */
    public function setMaximum(?float $maximum): self
    {
        $this->maximum = $maximum;

        return $this;
    }

    /**
     * @return bool
     */
    public function getExclusiveMaximum(): ?bool
    {
        return $this->exclusiveMaximum;
    }

    /**
     * @param bool $exclusiveMaximum
     *
     * @return self
     */
    public function setExclusiveMaximum(?bool $exclusiveMaximum): self
    {
        $this->exclusiveMaximum = $exclusiveMaximum;

        return $this;
    }

    /**
     * @return float
     */
    public function getMinimum(): ?float
    {
        return $this->minimum;
    }

    /**
     * @param float $minimum
     *
     * @return self
     */
    public function setMinimum(?float $minimum): self
    {
        $this->minimum = $minimum;

        return $this;
    }

    /**
     * @return bool
     */
    public function getExclusiveMinimum(): ?bool
    {
        return $this->exclusiveMinimum;
    }

    /**
     * @param bool $exclusiveMinimum
     *
     * @return self
     */
    public function setExclusiveMinimum(?bool $exclusiveMinimum): self
    {
        $this->exclusiveMinimum = $exclusiveMinimum;

        return $this;
    }

    /**
     * @return int
     */
    public function getMaxLength(): ?int
    {
        return $this->maxLength;
    }

    /**
     * @param int $maxLength
     *
     * @return self
     */
    public function setMaxLength(?int $maxLength): self
    {
        $this->maxLength = $maxLength;

        return $this;
    }

    /**
     * @return int
     */
    public function getMinLength(): ?int
    {
        return $this->minLength;
    }

    /**
     * @param int $minLength
     *
     * @return self
     */
    public function setMinLength(?int $minLength): self
    {
        $this->minLength = $minLength;

        return $this;
    }

    /**
     * @return string
     */
    public function getPattern(): ?string
    {
        return $this->pattern;
    }

    /**
     * @param string $pattern
     *
     * @return self
     */
    public function setPattern(?string $pattern): self
    {
        $this->pattern = $pattern;

        return $this;
    }

    /**
     * @return int
     */
    public function getMaxItems(): ?int
    {
        return $this->maxItems;
    }

    /**
     * @param int $maxItems
     *
     * @return self
     */
    public function setMaxItems(?int $maxItems): self
    {
        $this->maxItems = $maxItems;

        return $this;
    }

    /**
     * @return int
     */
    public function getMinItems(): ?int
    {
        return $this->minItems;
    }

    /**
     * @param int $minItems
     *
     * @return self
     */
    public function setMinItems(?int $minItems): self
    {
        $this->minItems = $minItems;

        return $this;
    }

    /**
     * @return bool
     */
    public function getUniqueItems(): ?bool
    {
        return $this->uniqueItems;
    }

    /**
     * @param bool $uniqueItems
     *
     * @return self
     */
    public function setUniqueItems(?bool $uniqueItems): self
    {
        $this->uniqueItems = $uniqueItems;

        return $this;
    }

    /**
     * @return int
     */
    public function getMaxProperties(): ?int
    {
        return $this->maxProperties;
    }

    /**
     * @param int $maxProperties
     *
     * @return self
     */
    public function setMaxProperties(?int $maxProperties): self
    {
        $this->maxProperties = $maxProperties;

        return $this;
    }

    /**
     * @return int
     */
    public function getMinProperties(): ?int
    {
        return $this->minProperties;
    }

    /**
     * @param int $minProperties
     *
     * @return self
     */
    public function setMinProperties(?int $minProperties): self
    {
        $this->minProperties = $minProperties;

        return $this;
    }

    /**
     * @return string[]
     */
    public function getRequired(): ?array
    {
        return $this->required;
    }

    /**
     * @param string[] $required
     *
     * @return self
     */
    public function setRequired(?array $required): self
    {
        $this->required = $required;

        return $this;
    }

    /**
     * @return mixed[]
     */
    public function getEnum(): ?array
    {
        return $this->enum;
    }

    /**
     * @param mixed[] $enum
     *
     * @return self
     */
    public function setEnum(?array $enum): self
    {
        $this->enum = $enum;

        return $this;
    }

    /**
     * @return string
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * @param string $type
     *
     * @return self
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
     * @return Schema|Reference
     */
    public function getNot()
    {
        return $this->not;
    }

    /**
     * @param Schema|Reference $not
     *
     * @return self
     */
    public function setNot($not): self
    {
        $this->not = $not;

        return $this;
    }

    /**
     * @return Schema[]|Reference[]
     */
    public function getAllOf(): ?array
    {
        return $this->allOf;
    }

    /**
     * @param Schema[]|Reference[] $allOf
     *
     * @return self
     */
    public function setAllOf(?array $allOf): self
    {
        $this->allOf = $allOf;

        return $this;
    }

    /**
     * @return Schema[]|Reference[]
     */
    public function getOneOf(): ?array
    {
        return $this->oneOf;
    }

    /**
     * @param Schema[]|Reference[] $oneOf
     *
     * @return self
     */
    public function setOneOf(?array $oneOf): self
    {
        $this->oneOf = $oneOf;

        return $this;
    }

    /**
     * @return Schema[]|Reference[]
     */
    public function getAnyOf(): ?array
    {
        return $this->anyOf;
    }

    /**
     * @param Schema[]|Reference[] $anyOf
     *
     * @return self
     */
    public function setAnyOf(?array $anyOf): self
    {
        $this->anyOf = $anyOf;

        return $this;
    }

    /**
     * @return Schema|Reference
     */
    public function getItems()
    {
        return $this->items;
    }

    /**
     * @param Schema|Reference $items
     *
     * @return self
     */
    public function setItems($items): self
    {
        $this->items = $items;

        return $this;
    }

    /**
     * @return Schema[]|Reference[]
     */
    public function getProperties(): ?\ArrayObject
    {
        return $this->properties;
    }

    /**
     * @param Schema[]|Reference[] $properties
     *
     * @return self
     */
    public function setProperties(?\ArrayObject $properties): self
    {
        $this->properties = $properties;

        return $this;
    }

    /**
     * @return Schema|Reference|bool
     */
    public function getAdditionalProperties()
    {
        return $this->additionalProperties;
    }

    /**
     * @param Schema|Reference|bool $additionalProperties
     *
     * @return self
     */
    public function setAdditionalProperties($additionalProperties): self
    {
        $this->additionalProperties = $additionalProperties;

        return $this;
    }

    /**
     * @return string
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * @param string $description
     *
     * @return self
     */
    public function setDescription(?string $description): self
    {
        $this->description = $description;

        return $this;
    }

    /**
     * @return string
     */
    public function getFormat(): ?string
    {
        return $this->format;
    }

    /**
     * @param string $format
     *
     * @return self
     */
    public function setFormat(?string $format): self
    {
        $this->format = $format;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getDefault()
    {
        return $this->default;
    }

    /**
     * @param mixed $default
     *
     * @return self
     */
    public function setDefault($default): self
    {
        $this->default = $default;

        return $this;
    }

    /**
     * @return bool
     */
    public function getNullable(): ?bool
    {
        return $this->nullable;
    }

    /**
     * @param bool $nullable
     *
     * @return self
     */
    public function setNullable(?bool $nullable): self
    {
        $this->nullable = $nullable;

        return $this;
    }

    /**
     * @return Discriminator
     */
    public function getDiscriminator(): ?Discriminator
    {
        return $this->discriminator;
    }

    /**
     * @param Discriminator $discriminator
     *
     * @return self
     */
    public function setDiscriminator(?Discriminator $discriminator): self
    {
        $this->discriminator = $discriminator;

        return $this;
    }

    /**
     * @return bool
     */
    public function getReadOnly(): ?bool
    {
        return $this->readOnly;
    }

    /**
     * @param bool $readOnly
     *
     * @return self
     */
    public function setReadOnly(?bool $readOnly): self
    {
        $this->readOnly = $readOnly;

        return $this;
    }

    /**
     * @return bool
     */
    public function getWriteOnly(): ?bool
    {
        return $this->writeOnly;
    }

    /**
     * @param bool $writeOnly
     *
     * @return self
     */
    public function setWriteOnly(?bool $writeOnly): self
    {
        $this->writeOnly = $writeOnly;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getExample()
    {
        return $this->example;
    }

    /**
     * @param mixed $example
     *
     * @return self
     */
    public function setExample($example): self
    {
        $this->example = $example;

        return $this;
    }

    /**
     * @return ExternalDocumentation
     */
    public function getExternalDocs(): ?ExternalDocumentation
    {
        return $this->externalDocs;
    }

    /**
     * @param ExternalDocumentation $externalDocs
     *
     * @return self
     */
    public function setExternalDocs(?ExternalDocumentation $externalDocs): self
    {
        $this->externalDocs = $externalDocs;

        return $this;
    }

    /**
     * @return bool
     */
    public function getDeprecated(): ?bool
    {
        return $this->deprecated;
    }

    /**
     * @param bool $deprecated
     *
     * @return self
     */
    public function setDeprecated(?bool $deprecated): self
    {
        $this->deprecated = $deprecated;

        return $this;
    }

    /**
     * @return XML
     */
    public function getXml(): ?XML
    {
        return $this->xml;
    }

    /**
     * @param XML $xml
     *
     * @return self
     */
    public function setXml(?XML $xml): self
    {
        $this->xml = $xml;

        return $this;
    }
}
