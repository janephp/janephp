<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Jane\OpenApi\JsonSchema\Version3\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Jane\\OpenApi\\JsonSchema\\Version3\\Model\\Response';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Jane\OpenApi\JsonSchema\Version3\Model\Response;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Jane\OpenApi\JsonSchema\Version3\Model\Response();
        $data = clone $data;
        if (property_exists($data, 'description')) {
            $object->setDescription($data->{'description'});
            unset($data->{'description'});
        }
        if (property_exists($data, 'headers')) {
            $object->setHeaders($data->{'headers'});
            unset($data->{'headers'});
        }
        if (property_exists($data, 'content')) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data->{'content'} as $key => $value) {
                $value_1 = $value;
                if (is_object($value)) {
                    $value_1 = $this->denormalizer->denormalize($value, 'Jane\\OpenApi\\JsonSchema\\Version3\\Model\\MediaTypeWithExample', 'json', $context);
                }
                if (is_object($value) and isset($value->{'examples'})) {
                    $value_1 = $this->denormalizer->denormalize($value, 'Jane\\OpenApi\\JsonSchema\\Version3\\Model\\MediaTypeWithExamples', 'json', $context);
                }
                $values[$key] = $value_1;
            }
            $object->setContent($values);
            unset($data->{'content'});
        }
        if (property_exists($data, 'links')) {
            $values_1 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data->{'links'} as $key_1 => $value_2) {
                $value_3 = $value_2;
                if (is_object($value_2)) {
                    $value_3 = $this->denormalizer->denormalize($value_2, 'Jane\\OpenApi\\JsonSchema\\Version3\\Model\\LinkWithOperationRef', 'json', $context);
                }
                if (is_object($value_2)) {
                    $value_3 = $this->denormalizer->denormalize($value_2, 'Jane\\OpenApi\\JsonSchema\\Version3\\Model\\LinkWithOperationId', 'json', $context);
                }
                if (is_object($value_2) and isset($value_2->{'$ref'})) {
                    $value_3 = $this->denormalizer->denormalize($value_2, 'Jane\\OpenApi\\JsonSchema\\Version3\\Model\\Reference', 'json', $context);
                }
                $values_1[$key_1] = $value_3;
            }
            $object->setLinks($values_1);
            unset($data->{'links'});
        }
        foreach ($data as $key_2 => $value_4) {
            if (preg_match('/^x-/', $key_2)) {
                $object[$key_2] = $value_4;
            }
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getDescription()) {
            $data->{'description'} = $object->getDescription();
        }
        if (null !== $object->getHeaders()) {
            $data->{'headers'} = $object->getHeaders();
        }
        if (null !== $object->getContent()) {
            $values = new \stdClass();
            foreach ($object->getContent() as $key => $value) {
                $value_1 = $value;
                if (is_object($value)) {
                    $value_1 = $this->normalizer->normalize($value, 'json', $context);
                }
                if (is_object($value)) {
                    $value_1 = $this->normalizer->normalize($value, 'json', $context);
                }
                $values->{$key} = $value_1;
            }
            $data->{'content'} = $values;
        }
        if (null !== $object->getLinks()) {
            $values_1 = new \stdClass();
            foreach ($object->getLinks() as $key_1 => $value_2) {
                $value_3 = $value_2;
                if (is_object($value_2)) {
                    $value_3 = $this->normalizer->normalize($value_2, 'json', $context);
                }
                if (is_object($value_2)) {
                    $value_3 = $this->normalizer->normalize($value_2, 'json', $context);
                }
                if (is_object($value_2)) {
                    $value_3 = $this->normalizer->normalize($value_2, 'json', $context);
                }
                $values_1->{$key_1} = $value_3;
            }
            $data->{'links'} = $values_1;
        }
        foreach ($object as $key_2 => $value_4) {
            if (preg_match('/^x-/', $key_2)) {
                $data->{$key_2} = $value_4;
            }
        }

        return $data;
    }
}
